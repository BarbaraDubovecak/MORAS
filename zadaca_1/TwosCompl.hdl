CHIP TwosCompl
{
	IN in[16];
	OUT out[16];
	
	PARTS:
	
	Or8Way(in = in[0..7], out = o1);
	Or8Way(in = in[8..15], out = o2);
	Or(a = o1, b = o2, out = o);
	
	
	Not(in = o, out = no);
	
	
	
	Not16(in = in, out = nin);
	
	Or(a = o, b = no, out = jedan);
	
	Not(in = in[0], out = n0);
	Not(in = in[1], out = n1);
	Not(in = in[2], out = n2);
	Not(in = in[3], out = n3);
	Not(in = in[4], out = n4);
	Not(in = in[5], out = n5);
	Not(in = in[6], out = n6);
	Not(in = in[7], out = n7);
	Not(in = in[8], out = n8);
	Not(in = in[9], out = n9);
	Not(in = in[10], out = n10);
	Not(in = in[11], out = n11);
	Not(in = in[12], out = n12);
	Not(in = in[13], out = n13);
	Not(in = in[14], out = n14);
	Not(in = in[15], out = n15);
	
	HalfAdder(a = n0, b = jedan, sum = out[0], carry = c0);
	HalfAdder(a = n1, b = c0, sum = out[1], carry = c1);
	HalfAdder(a = n2, b = c1, sum = out[2], carry = c2);
	HalfAdder(a = n3, b = c2, sum = out[3], carry = c3);
	HalfAdder(a = n4, b = c3, sum = out[4], carry = c4);
	HalfAdder(a = n5, b = c4, sum = out[5], carry = c5);
	HalfAdder(a = n6, b = c5, sum = out[6], carry = c6);
	HalfAdder(a = n7, b = c6, sum = out[7], carry = c7);
	HalfAdder(a = n8, b = c7, sum = out[8], carry = c8);
	HalfAdder(a = n9, b = c8, sum = out[9], carry = c9);
	HalfAdder(a = n10, b = c9, sum = out[10], carry = c10);
	HalfAdder(a = n11, b = c10, sum = out[11], carry = c11);
	HalfAdder(a = n12, b = c11, sum = out[12], carry = c12);
	HalfAdder(a = n13, b = c12, sum = out[13], carry = c13);
	HalfAdder(a = n14, b = c13, sum = out[14], carry = c14);
	HalfAdder(a = n15, b = c14, sum = out[15], carry = c15);
	
}